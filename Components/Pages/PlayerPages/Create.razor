@page "/players/create"
@using Microsoft.EntityFrameworkCore
@using EnglishQuizApp.Models
@inject IDbContextFactory<EnglishQuizApp.Data.EnglishQuizAppContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Player</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Player" OnValidSubmit="AddPlayer" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Player.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Player.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="age" class="form-label">Age:</label> 
                <InputNumber id="age" @bind-Value="Player.Age" class="form-control" /> 
                <ValidationMessage For="() => Player.Age" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label> 
                <InputText id="email" @bind-Value="Player.Email" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Player.Email" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="totalscore" class="form-label">TotalScore:</label> 
                <InputNumber id="totalscore" @bind-Value="Player.TotalScore" class="form-control" /> 
                <ValidationMessage For="() => Player.TotalScore" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/players">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Player Player { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddPlayer()
    {
        using var context = DbFactory.CreateDbContext();
        context.Players.Add(Player);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/players");
    }
}
